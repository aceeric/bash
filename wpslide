#!/bin/bash
#
# A script that displays images as Gnome wallpapers. (The script doesn't
# verify that Gnome is the installed desktop...) This has been tested on
# the following configuration:
#
# - Ubuntu 18.04.3 LTS
# - GNU bash, version 4.4.20(1)-release
# - GNOME Shell 3.28.4
#
# For more info - see the help below
#

#
# Short and long option definitions
#
short_opts=hrnfod:
long_opts=help,recurse,random,from-cur,only-one,delay:
script_name=$(basename "$0")

#
# -r|--recurse
# 
# 0 -- No directory recursion
# 1 -- Recurse into directories
#
recurse=0

#
# -n|--random
# 
# 0 -- Display images in sequential order
# 1 -- random order
#
random_order=0

#
# -f|--from-cur
#
# 0 -- Ignore the currently displaying wallpaper when choosing the first image
#      to select
# 1 -- In sequential mode, find the image that is one past the currently displaying
#      wallpaper and use that start. In random mode, select any image that is not
#      the currently displaying wallpaper and start with that
#
from_cur=0

#
# -o|--only-one
#
# 0 -- Display wallpapers indefinitely until the script is terminated
# 1 -- Display one wallpaper and then exit
#
only_one=0

#
# -d|--delay
#
# Either the constant 'read', or a value that the 'sleep' command will understand
#
delay="10m"

#
# Image path(s) parsed from positional params and made absolute - defaulted
# to the current working directory if no paths were provided on the command line
#
wp_paths=()

#
# Images collected from the path(s) above
#
wps=()

#
# Next image to display
#
next_wp=

#
# see the 'randoms' script var below
#
NO_RANDOMS="-e ?"

#
# A list of random numbers that have been used as indexes into the
# image array - so they are not reused on subsequent random number
# generations. This value is used as a grep exclusion so it is in
# the form "-e 23 -e 453 -e 3" etc. The variable is initialized
# with a value that won't exclude any numbers - this avoids having
# to check whether it contains any exclusions when it is used in
# the number generator the first time vs subsequent times
#
randoms="$NO_RANDOMS"

#
# In random mode, a randomly generate index into the images array
# that exludes all previously generated index values. In sequential
# mode starts at zero, goes to the end of the array, then wraps
#
idx=

#
# Displays usage instructions
#
# Params:
#
#   None
#
# Returns:
#
#   Nothing
#
function usage() {
  while IFS= read -r line; do
    echo "${line:4}"
  done <<< '
    
    wpslide - wallpaper slideshow
    
    Sets Gnome wallpapers from image paths specified on the command line. Can display wallpapers in slide-show
    fashion, or, once per script invocation.
    
    Usage: wpslide [-h,--help] [-r,--recurse] [-n,--random] [-f,--from-cur] [-o,--only-one] [-d,--delay]
           path [path...]
    
    Options:
    
      -h,--help      Prints this help and exits
      -r,--recurse   Recurses into subdirectories of the directories specified on the command line. By default,
                     subdirectories are not recursed
      -n,--random    Displays images in a random order. By default, images are displayed in name-sorted order -
                     including directory name. E.g.: bar/baz.jpg sorts before baz/bar.jpg
      -f,--from-cur  Queries Gnome for the current wallpaper, and in sequential mode starts with the next sequential
                     image. In random mode, randomly selects a different starting image. This arg is useful for running
                     the script as a desktop launcher to support changing the wallpaper by double-clicking the launcher
                     (An example launcher is provided after the usage examples below). If omitted, then the currently
                     displaying wallpaper is ignored when determining the first image to display
      -o,--only-one  Displays one image and then exits. The default is to display images indefinitely until the
                     script is terminated. Useful when defining a desktop launcher to change the wallpaper
      -d,--delay     Delay control. Two forms are supported. In the first form, the constant "read" means the script
                     waits for you to press ENTER between images. The second form is a value suitable to provide to
                     the "sleep" command, such as "30s", or "10m", etc. In the latter case, the script sleeps
                     the specified interval between images. If omitted, a default delay of ten minutes is used

    Positional params:

      The directory - or directories - from which to display images and/or individual image path(s). If no path is
      provided, then the current working directory is used. If the provided path spec resolves to a single image,
      then the script just sets the wallpaper to that image and exits - just as if you had manually set the wallpaper
      with the Gnome "gsettings set org.gnome.desktop.background" command. In this instance, command line args are
      still parsed, but they are ignored.

    Examples:
    
      wpslide -d read $HOME/Pictures
      
      Displays images from the $HOME/Pictures directory, waiting for you to press ENTER between images. Does not
      recurse into subdirectories

      wpslide -d 30s $HOME/Pictures
      
      Same as the prior example, except waits thirty seconds between images rather than waiting for the ENTER key

      wpslide -d 30s -r $HOME/Pictures
      
      Same as the prior example, except also displays images from subdirectories of $HOME/Pictures

      wpslide -d 30s -r $HOME/Pictures $HOME/other-pictures foo.png

      Same as the prior example, except also displays images from the $HOME/other-pictures directory and its
      subdirectories, as well as foo.png in the current working directory. (Note: if you specify /foo /foo/bar
      and /foo/bar/baz as well as recursion, the script will only display the uniques)
      
      wpslide /home/$USER/foo.png
      
      Sets the wallpaper to foo.png and exits.

      
    You can create a deskop launcher that changes the current wallpaper with a double-click of the desktop icon.
    (Replace <you> with your Linux account name below):
      
    [Desktop Entry]
    Version=1.0
    Type=Application
    Terminal=false
    Icon=/usr/share/icons/...whatever.jpg
    Name=Next Wallpaper
    Exec=/home/<you>/scripts/wpslide -fon /home/<you>/Pictures
    '
}

#
# Helps interpret values parsed by getopt
#
# Params:
#
#   $1 is an option parameter parsed by getopt
#
# Returns:
#
#   If $1 starts with the equals sign, then returns everything after the equals
#   sign. Otherwise returns $1 unmodified. Because if the user specifies a short
#   option with the equal sign, (e.g. '-l=100') getopt includes the equal in the
#   parsed option value. Technically the user shouldn't do that, but if they do
#   we want to handle that. If the user specifies an option in any of the
#   following forms, the parsed value will be correct:
#     -l100
#     -l 100
#     -l=100
#     --level=100
#     --level 100
#   (By the way, 'getopt' will parse -l100 and pick out the value 100, but will
#   not parse --level100)
#
function opt_val() {
  opt="$1"
  if [[ "$opt" == =* ]]; then
    echo "${opt:1}"
  else
    echo "$opt"
  fi
}

#
# Parses the command line and sets script variables
#
# Params:
#
#   $@ - The entire command line
#
# Returns:
#
#   Nothing
#
# Exits:
#
#   If parse error
#
# Sets script variable(s):
#
#   recurse      -- from '-r|--recurse'
#   random_order -- from '-n|--random'
#   from_cur     -- from '-f|--from-cur'
#   only_one     -- from '-o|--only_one'
#   delay        -- from '-d|--delay'
#   wp_paths     -- absolute image paths from positional params
#
function parse_args() {
  local parsed=$(getopt --options $short_opts --longoptions $long_opts -n $script_name -- "$@")
  
  if [[ "$?" -ne 0 ]]; then
    exit 1
  fi

  eval set -- "$parsed"

  while true; do
    case "$1" in
      -h|--help)
        usage
        exit 1
        ;;
      -r|--recurse)
        recurse=1
        shift 1
        ;;
      -n|--random)
        random_order=1
        shift 1
        ;;
      -f|--from-cur)
        from_cur=1
        shift 1
        ;;
      -o|--only_one)
        only_one=1
        shift 1
        ;;
      -d|--delay)
        delay=$(opt_val "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
    esac
  done

  # parse positional params into a pathspec array. if no path(s) were
  # provided, then use the current working directory

  if [[ $# -eq 0 ]]; then
    local positional=(".")
  else
    local positional=("$@")
  fi

  # validate path specs, convert to absolute, and save in the 'wp_paths'
  # script var

  for p in "${positional[@]}"; do
    if [[ -d "$p" ]]; then
      pushd "$p" &>/dev/null
      wp_paths+=("$(pwd)")
      popd &>/dev/null
    elif [[ -f "$p" ]]; then
      p=$(readlink -e "$p")
      wp_paths+=("$p")
    else
      echo "$script_name: '$p' does not appear to be a file or directory..."
      exit 1
    fi
  done
}

#
# Uses script variables 'recurse' and 'wp_paths' build an array of images.
#
# Params:
#
#   None
#
# Returns:
#
#   Nothing
#
# Sets script variable(s):
#
#   wps -- the array of images that were found. If no images were found,
#          then the array will be empty, but the function will not error
#
function find_images() {

  # translate the recursion setting into an arg for the 'find' command, which
  # recurses by default

  if [[ "$recurse" -eq 1 ]]; then
    local maxdepth=""
  else  
    local maxdepth="-maxdepth 1"
  fi

  # collect up all the PNG and JPG files from the specified path(s) into the
  # 'wps' script array. In case multiple paths are specified, and the paths
  # nest, sort unique to avoid dups. If 'wp_paths' contains a single filename
  # then this basically just copies the filename into the 'wps' array

  mapfile -t < <(find "${wp_paths[@]}" $maxdepth -name '*.jpg' -o -name "*.png" | sort -u) wps
}

#
# Generates a random number from zero to the size of the images array-1, and
# saves the number in an exclusion list so that on subsequent calls the same
# number is not re-generated. This approach is based on the accepted answer in:
# https://stackoverflow.com/questions/54554364/generate-random-number-except-values-in-bash
#
# Params:
#
#   None
#
# Returns:
#
#   Nothing
#
# Sets script variable(s):
#
#   idx     -- the generated number
#   randoms -- the list of all random numbers generated so far,
#              including the one generated by the call
# 
function next_random_number() {
  idx=$(shuf -n 1 <(seq 0 $((${#wps[@]} - 1)) | grep -Fxv $randoms))
  if [[ ! -z $idx ]]; then
    randoms="$randoms -e $idx"
  fi
}

#
# Selects a random image from the 'wps' script array, and adds the randomly
# generated index value into an exclusions list so the same image isn't selected
# multiple times in a pass through the array.
#
# Successive calls will eventually return all the images. When that happens, the
# exclusions list is cleared so that the function can perpetually return images.
# At that time, the image array is also re-populated using cmdline args so the
# image list will match the filesystem.
#
# The return value is assigned to a script variable because the function needs to
# modify other script variables, and it can't do that if called within a subshell.
#
# Params:
#
#   None
#
# Returns:
#
#   Nothing
#
# Sets script variable(s):
#
#   next_wp -- The next image to display
#   randoms -- The list of random numbers generated so far
#   idx     -- The index into the images array used to select the image returned
#              by the function
# 
function next_image_random() {
  next_random_number
  if [[ -z $idx ]]; then
    # all images collected the last time through were displayed: start over
    randoms="$NO_RANDOMS"
    find_images
  fi
  next_random_number
  next_wp="${wps[$idx]}"
}

#
# Selects the next sequential image from the 'wps' script array with wrapping.
# When the wrap occurs, the image array is re-populated from the cmdline args
# so the image list will match the filesystem.
#
# Params:
#
#   None
#
# Returns:
#
#   Nothing
#
# Sets script variable(s):
#
#   next_wp -- The next image to display, round-robin style. The return value
#              is assigned to a script variable for consistency with
#              next_image_random
#   idx     -- The index into the images array used to select the image returned
#              by the function
# 
function next_image_sequential() {

  if [[ $idx -ge $((${#wps[@]}-1)) ]]; then
    idx=-1
    find_images
  fi
  idx=$((idx+1))
  next_wp="${wps[$idx]}"
}

#
# Calls 'next_image_random' or 'next_image_sequential' per the value of 
# the script variable 'random_order'. See those functions for details.
#
# Params:
#
#   $1 -- if specified, and running in sequential mode, then this arg is used
#         to control the first image to display, unless the first image to display
#         was already set by cvirtue of the --from-cur arg being specified, in
#         which case this arg is ignored. In random mode, this arg is always ignored.
#
# Returns:
#
#   see next_image_random and next_image_sequential
#
# Sets script variable(s):
#
#   see next_image_random and next_image_sequential
#
function next_image() {
  if [[ $random_order -eq 1 ]]; then
    next_image_random
    return
  elif [[ ! -z $1 ]] && [[ -z $idx ]]; then
    idx=$1
  fi
  next_image_sequential
}

#
# Sets the wallpaper to the passed image
#
# Params:
#
#   $1 -- the path to the image
#
# Returns:
#
#   Nothing
#
# Sets script variable(s):
#
#   None
#
function display_image() {
  #DEBUG
  #echo "file://$1"
  gsettings set org.gnome.desktop.background picture-uri "file://$1"
}

#
# Displays the images in the script image array 'wps'. Images are displayed in random or
# sequential order as defined by the 'random_order' script variable with delay between
# images as specified in the 'delay' script variable. The function does not repeat an image
# during a pass through the images array. Once all the images in the array have been displayed,
# state is reset so the function will run forever. If the array of images is empty when the
# function is called - it emanates an error message and exits. If the array contains only
# one image, or the --only-one arg was specified, then the function exits after
# displaying one image.
#
# Params:
#
#   None
#
# Returns:
#
#   Nothing
#
# Exits:
#
#   If there are no images to display
#
# Sets script variable(s):
#
#   n/a
#
function display_images() {

  if [[ ${#wps[@]} -eq 0 ]]; then
    echo "Did not find any images in the specified path(s)"
    exit 1
  fi

  # initialize the first image to display, if the -f,--from-cur arg
  # was not provided

  next_image -1

  while [[ 1 ]]; do
    display_image "$next_wp"
    if [[ $only_one -eq 1 ]] || [[ ${#wps[@]} -eq 1 ]]; then
      return
    fi
    if [[ "$delay" == "read" ]]; then
      read
    else
      sleep "$delay"
    fi
    next_image
  done
}

#
# If the -f,--from-cur arg was specified, that means the caller wants to display the
# next image in sequential mode, or a different image in random mode **in relation to the
# currently displaying wallpaper**. If -f,--from-cur was not specified, or if the image
# list contains only one image, then does nothing.
#
# Params:
#
#   None
#
# Returns:
#
#   Nothing
#
# Sets script variable(s):
#
#   idx     -- The index of the last image displayed by the script. In sequential mode,
#              the function sets the idx script var to the currently displaying
#              wallpaper, which causes the script to display the following one.
#   randoms -- The random number exclusion list. In random mode, finds the currently
#              displaying wallpaper in the images array and records that index in the
#              random number exclusion list that image won't be selected in the initial
#              pass through the images array.
#
# Once the script makes a complete pass through the image array and then re-generates the
# array, the -f,--from-cur arg has no effect on subsequent passes.
#
function handle_from_current_option() {
  
  if [[ $from_cur -ne 1 ]] || [[ ${#wps[@]} -eq 1 ]]; then
    return
  fi

  local current_wallpaper="$(gsettings get org.gnome.desktop.background picture-uri)"

  # strip off the "file://" prefix and the single quotes enclosing the absolute path/file
  
  current_wallpaper="${current_wallpaper:8:-1}"

  # find the curently displayed image in the images list and - based on random or sequential
  # mode - handle it accordingly. If we don't find it, that means the wallpaper that is
  # currently displaying didn't come from the set of paths provided on the command line.
  # This isn't an error - it just means that the current wallpaper doesn't influence the
  # behavior of the script. In other words it's as if the -f,--from-cur arg was not specified

  for ((i=0;i<${#wps[@]};++i)); do
    if [[ "${wps[$i]}" == "$current_wallpaper" ]]; then
      if [[ $random_order -eq 1 ]]; then
        randoms="$randoms -e $i"
      else
        idx=$i
      fi
      break
    fi
  done
}

#
# Entry point
#
parse_args "$@"
find_images
handle_from_current_option
display_images
