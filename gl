#!/usr/bin/env bash

# Displays git commit history for branches and files. Truncates long commit
# comments so there is one line per commit - fitting each line to the console
# width resulting in a compact display. Tested on Git version 2.17.1, Bash
# version 4.4.20(1)-release, Ubuntu 18.04.4 LTS.

set -u

#
# Assume we will be operating on a branch. Based on args, this could be
# changed to "file"
#
refspec_type="branch"

#
# Define the colors that will be provided to the git log command to colorize
# the log output
#
hashcol="bold red"
authcol="green"
datecol="bold blue"
cmntcol="italic #ff0ab3"

#
# Main function. Parses args. Gets and displays commit history
#
# params: The right-most param beginning with a dash is considered a line count. The
#         right-most param *not* beginning with a dash is considered either a
#         branch, or a file name
#
function main() {

  # ensure current working directory is within a git repo
  in_git_repo="$(git rev-parse --is-inside-work-tree 2>/dev/null)"
  if [[ -z "$in_git_repo" ]]; then
    echo "Current directory is not a git repository"
    exit 1
  fi

  # Validate args. Show usage and exit if invalid
  if [[ "${1-x}" == "-h" ]] || [[ "${1-x}" == "--help" ]] || [[ "$#" -gt 2 ]]; then
    echo "Usage:"
    echo " gl (no args)     20 lines on the current branch"
    echo " gl <refspec>     20 lines on <refspec>"
    echo " gl -n <refspec>  n lines on <refspec>"
    echo " gl -n            n lines on the current branch"
    echo
    echo "Order of args is not important. 'refspec' can be a"
    echo "branch or a filename. Example:"
    echo
    echo "gl -5 master"
    echo
    echo "Displays the 5 most recent commits on master"
    exit 1
  fi

  # set defaults: current active branch, 20 lines of history
  refspec=$(git branch | grep -F "*" | tr -d "* ")
  count=20

  # parse args. Rightmost arg beginning with dash is the history count to display
  # Rightmost arg not beginning with dash is branch or filename
  for opt in "$@"; do
    if [[ "${opt:0:1}" == "-" ]]; then
      count="${opt:1}"
    else
      refspec="$opt"
    fi
  done

  re='^[0-9]+$'
  if ! [[ $count =~ $re ]] ; then
    echo "The value after the dash should be a commit count";
    exit 1
  fi  

  # validate local branch or filename exists
  exists=$(git branch | grep " ""$refspec""$")
  if [[ -z $exists ]]; then
    # try remote branch
    exists=$(git branch -r | grep " ""$refspec""$")
  fi

  if [[ -z $exists ]]; then
    if [[ -f $refspec ]]
    then
      refspec_type="file"
    else
      echo "No local branch or file - or remote branch - matches: $refspec"
      exit 1
    fi
  fi

  # build a header message that is relevant for refspec type
  on_msg=""
  if [[ $refspec_type == "branch" ]]; then
    on_msg="on branch"
  else
    on_msg="for file"
  fi

  # get the count of available commits for refspec
  IFS= commits=$(git log --pretty=format:"%h" $refspec)
  commits=$(echo $commits | head -n $count | wc -l)

  # build final header
  if [[ $commits -lt $count ]]; then
    msg="Most recent $commits commits $on_msg: $refspec ($count requested, but only $commits avaliable)"
  else
    msg="Most recent $count commits $on_msg: $refspec"
  fi

  # truncate the commit message to fit into available screen width for a nice compact display
  SHA=8
  space=1
  who=15
  date=22 # 10 if author date only, 22 if author and committer date
  cols=$(tput cols)
  msgwidth=$( expr $cols - $SHA - $space - $who - $space - $date - $space - $space )

  # make the overline/underline to enclose the message
  uline=""
  for ((i=1;i<=${#msg};i++)); do uline="$uline-"; done

  # display the header
  echo -e "\n$uline\n$msg\n$uline"

  # header over history
  echo -e "$(tput bold)$(tput setaf 3)hash     author          author dt.  commit dt.  comment$(tput sgr0)"

  # show the commit history
  git log --color --pretty=format:"%C($hashcol)%<(8,trunc)%h%Creset %C($authcol)%<(15,trunc)%aN%Creset %C($datecol)%ad  %cd%Creset  %C($cmntcol)%<($msgwidth,trunc)%s%Creset" --date=short $refspec | head -n $count

  if [[ $commits -lt $count ]]; then
    # in this case, head inexplicably does not emanate a final newline...
    echo
  fi
  echo
}

main "$@"
